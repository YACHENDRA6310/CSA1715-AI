class Game:
    def __init__(self):
        self.board = [[0, 0, 0],
                      [0, 0, 0],
                      [0, 0, 0]]

    def is_full(self):
        for row in self.board:
            for cell in row:
                if cell == 0:
                    return False
        return True

    def is_winner(self, player):
        for row in self.board:
            if row == [player, player, player]:
                return True
        for col in range(3):
            if [self.board[0][col], self.board[1][col], self.board[2][col]] == [player, player, player]:
                return True
        if [self.board[0][0], self.board[1][1], self.board[2][2]] == [player, player, player]:
            return True
        if [self.board[0][2], self.board[1][1], self.board[2][0]] == [player, player, player]:
            return True
        return False

    def get_available_moves(self):
        moves = []
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == 0:
                    moves.append((row, col))
        return moves

    def make_move(self, player, move):
        self.board[move[0]][move[1]] = player

    def undo_move(self, move):
        self.board[move[0]][move[1]] = 0

    def evaluate(self):
        if self.is_winner(1):
            return 1
        elif self.is_winner(-1):
            return -1
        else:
            return 0

def alpha_beta_pruning(game, depth, alpha, beta, player):
    if depth == 0 or game.is_full():
        return game.evaluate(), None

    best_move = None

    if player == 1:
        best_value = -float('inf')
        for move in game.get_available_moves():
            game.make_move(player, move)
            value, _ = alpha_beta_pruning(game, depth - 1, alpha, beta, -player)
            game.undo_move(move)
            if value > best_value:
                best_value = value
                best_move = move
            alpha = max(alpha, best_value)
            if alpha >= beta:
                break
    else:
        best_value = float('inf')
        for move in game.get_available_moves():
            game.make_move(player, move)
            value, _ = alpha_beta_pruning(game, depth - 1, alpha, beta, -player)
            game.undo_move(move)
            if value < best_value:
                best_value = value
                best_move = move
            beta = min(beta, best_value)
            if alpha >= beta:
                break

    return best_value, best_move

def main():
    game = Game()
    player = 1
    while not game.is_full():
        if player == 1:
            _, move = alpha_beta_pruning(game, 5, -float('inf'), float('inf'), player)
        else:
            _, move = alpha_beta_pruning(game, 5, -float('inf'), float('inf'), player)
        game.make_move(player, move)
        print(game.board)
        if game.is_winner(player):
            print(f'Player {player} wins!')
            break
        player *= -1

if __name__ == '__main__':
    main()
